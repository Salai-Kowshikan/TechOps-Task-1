generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model access_levels {
  id            String  @id @db.Uuid
  accommodation String? @default("no_access")
  payments      String? @default("no_access")
  events        String? @default("no_access")
  others        String? @default("no_access")
  admin         admin   @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, name: "AdminAccessRelation")
}

model admin {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  name          String
  ph_number     String
  email         String         @unique
  password      String?
  token         String?
  is_admin      Boolean        @default(false)
  access_levels access_levels? @relation(name: "AdminAccessRelation")
}


/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model complaint_responses {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  complaint_id String?     @unique(map: "complaint_id_unique") @db.Uuid
  responses    Json[]      @db.Json
  complaints   complaints? @relation(fields: [complaint_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model complaints {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime             @default(now()) @db.Timestamptz(6)
  title               String
  description         String?
  image_url           String[]
  category            String
  status              String
  user_id             String?              @db.Uuid
  complaint_responses complaint_responses?
  users               users?               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  name       String
  ph_number  String
  email      String       @unique
  password   String?
  token      String?
  complaints complaints[]
}
